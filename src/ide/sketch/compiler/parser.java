package ide.sketch.compiler;
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Mar 19 18:57:34 EDT 2017
//----------------------------------------------------

import ide.sketch.managers.ScreenOutManager;
import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java.util.ArrayList;

/** CUP v0.10k generated parser.
  * @version Sun Mar 19 18:57:34 EDT 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\043\002\000\002\003\004\000\002\002" +
    "\004\000\002\026\005\000\002\026\003\000\002\026\003" +
    "\000\002\027\004\000\002\027\003\000\002\030\004\000" +
    "\002\030\003\000\002\004\003\000\002\004\005\000\002" +
    "\004\002\000\002\005\007\000\002\005\006\000\002\005" +
    "\004\000\002\006\010\000\002\032\004\000\002\032\002" +
    "\000\002\031\006\000\002\007\006\000\002\007\004\000" +
    "\002\007\002\000\002\033\005\000\002\033\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\010\006\000\002\011\004" +
    "\000\002\011\002\000\002\013\004\000\002\013\002\000" +
    "\002\012\004\000\002\012\003\000\002\012\005\000\002" +
    "\012\010\000\002\012\013\000\002\012\004\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\014\006" +
    "\000\002\014\006\000\002\014\002\000\002\015\006\000" +
    "\002\015\002\000\002\016\005\000\002\016\003\000\002" +
    "\017\003\000\002\017\005\000\002\017\007\000\002\017" +
    "\005\000\002\020\003\000\002\020\006\000\002\021\003" +
    "\000\002\021\005\000\002\021\003\000\002\022\003\000" +
    "\002\023\005\000\002\023\005\000\002\023\004\000\002" +
    "\023\005\000\002\023\006\000\002\023\004\000\002\023" +
    "\005\000\002\023\005\000\002\023\003\000\002\024\005" +
    "\000\002\025\005\000\002\025\003\000\002\037\004\000" +
    "\002\037\003\000\002\034\006\000\002\034\010\000\002" +
    "\034\006\000\002\034\010\000\002\035\007\000\002\036" +
    "\012\000\002\040\010\000\002\041\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\250\000\006\002\001\006\001\001\002\000\004\002" +
    "\252\001\002\000\006\002\uffef\006\010\001\002\000\004" +
    "\002\000\001\002\000\006\002\uffef\006\010\001\002\000" +
    "\004\042\011\001\002\000\004\007\012\001\002\000\006" +
    "\006\014\010\uffeb\001\002\000\004\010\020\001\002\000" +
    "\004\042\015\001\002\000\006\005\016\010\uffec\001\002" +
    "\000\006\006\014\010\uffeb\001\002\000\004\010\uffed\001" +
    "\002\000\004\013\022\001\002\000\006\002\ufff1\006\ufff1" +
    "\001\002\000\046\006\026\007\uffd3\013\uffd3\014\uffd3\015" +
    "\025\016\uffd3\017\uffd3\022\uffd3\023\uffd3\030\uffd3\031\uffd3" +
    "\032\uffd3\033\uffd3\034\uffd3\036\uffd3\042\uffd3\044\uffd3\045" +
    "\uffd3\001\002\000\042\007\040\013\022\014\uffe1\016\146" +
    "\017\152\022\153\023\157\030\154\031\147\032\145\033" +
    "\044\034\047\036\046\042\052\044\050\045\041\001\002" +
    "\000\006\004\ufff5\042\136\001\002\000\006\013\121\042" +
    "\120\001\002\000\004\042\027\001\002\000\012\004\uffca" +
    "\005\uffca\011\uffca\024\uffca\001\002\000\012\004\uffce\005" +
    "\034\011\035\024\036\001\002\000\004\004\032\001\002" +
    "\000\046\006\026\007\uffd3\013\uffd3\014\uffd3\015\025\016" +
    "\uffd3\017\uffd3\022\uffd3\023\uffd3\030\uffd3\031\uffd3\032\uffd3" +
    "\033\uffd3\034\uffd3\036\uffd3\042\uffd3\044\uffd3\045\uffd3\001" +
    "\002\000\042\007\uffd5\013\uffd5\014\uffd5\016\uffd5\017\uffd5" +
    "\022\uffd5\023\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034" +
    "\uffd5\036\uffd5\042\uffd5\044\uffd5\045\uffd5\001\002\000\004" +
    "\042\027\001\002\000\004\045\115\001\002\000\022\007" +
    "\040\013\051\033\044\034\047\036\046\042\052\044\050" +
    "\045\041\001\002\000\016\004\uffbc\005\uffbc\010\uffbc\012" +
    "\uffbc\014\uffbc\043\uffbc\001\002\000\020\007\040\033\044" +
    "\034\047\036\046\042\052\044\050\045\041\001\002\000" +
    "\016\004\uffe7\005\uffe7\010\uffe7\012\uffe7\014\uffe7\043\uffe7" +
    "\001\002\000\006\004\uffcb\005\111\001\002\000\010\004" +
    "\uffc6\005\uffc6\043\057\001\002\000\016\004\uffe5\005\uffe5" +
    "\010\uffe5\012\uffe5\014\uffe5\043\uffe5\001\002\000\006\004" +
    "\uffc8\005\uffc8\001\002\000\016\004\uffe6\005\uffe6\010\uffe6" +
    "\012\uffe6\014\uffe6\043\uffe6\001\002\000\016\004\uffe4\005" +
    "\uffe4\010\uffe4\012\uffe4\014\uffe4\043\uffe4\001\002\000\020" +
    "\007\040\033\044\034\047\036\046\042\052\044\050\045" +
    "\041\001\002\000\020\007\040\033\044\034\047\036\046" +
    "\042\052\044\050\045\041\001\002\000\020\004\uffe8\005" +
    "\uffe8\007\063\010\uffe8\011\064\025\065\043\uffe8\001\002" +
    "\000\016\004\uffc5\005\uffc5\010\uffc5\012\uffc5\014\uffc5\043" +
    "\054\001\002\000\020\007\040\033\044\034\047\036\046" +
    "\042\052\044\050\045\041\001\002\000\004\043\057\001" +
    "\002\000\016\004\uffc4\005\uffc4\010\uffc4\012\uffc4\014\uffc4" +
    "\043\uffc4\001\002\000\014\033\044\034\047\036\046\042" +
    "\060\045\041\001\002\000\016\004\uffe8\005\uffe8\010\uffe8" +
    "\012\uffe8\014\uffe8\043\uffe8\001\002\000\016\004\uffc3\005" +
    "\uffc3\010\uffc3\012\uffc3\014\uffc3\043\uffc3\001\002\000\016" +
    "\004\uffbf\005\uffbf\010\uffbf\012\uffbf\014\uffbf\043\uffbf\001" +
    "\002\000\020\007\040\033\044\034\047\036\046\042\052" +
    "\044\050\045\041\001\002\000\020\007\040\033\044\034" +
    "\047\036\046\042\052\044\050\045\041\001\002\000\004" +
    "\042\066\001\002\000\020\004\uffbe\005\uffbe\007\070\010" +
    "\uffbe\012\uffbe\014\uffbe\043\uffbe\001\002\000\016\004\uffbd" +
    "\005\uffbd\010\uffbd\012\uffbd\014\uffbd\043\uffbd\001\002\000" +
    "\014\033\044\034\047\036\046\042\060\045\041\001\002" +
    "\000\004\010\075\001\002\000\006\005\073\010\uffe9\001" +
    "\002\000\014\033\044\034\047\036\046\042\060\045\041" +
    "\001\002\000\004\010\uffea\001\002\000\016\004\uffee\005" +
    "\uffee\010\uffee\012\uffee\014\uffee\043\uffee\001\002\000\004" +
    "\012\077\001\002\000\016\004\uffbb\005\uffbb\010\uffbb\012" +
    "\uffbb\014\uffbb\043\uffbb\001\002\000\010\005\073\010\uffe9" +
    "\043\057\001\002\000\010\005\104\010\uffb9\014\uffb9\001" +
    "\002\000\004\010\103\001\002\000\016\004\uffc0\005\uffc0" +
    "\010\uffc0\012\uffc0\014\uffc0\043\uffc0\001\002\000\020\007" +
    "\040\033\044\034\047\036\046\042\052\044\050\045\041" +
    "\001\002\000\006\010\uffba\014\uffba\001\002\000\004\014" +
    "\107\001\002\000\006\004\uffc7\005\uffc7\001\002\000\016" +
    "\004\uffc2\005\uffc2\010\uffc2\012\uffc2\014\uffc2\043\054\001" +
    "\002\000\004\042\027\001\002\000\004\004\uffcc\001\002" +
    "\000\006\010\114\043\054\001\002\000\016\004\uffc1\005" +
    "\uffc1\010\uffc1\012\uffc1\014\uffc1\043\uffc1\001\002\000\004" +
    "\012\116\001\002\000\012\004\uffc9\005\uffc9\011\uffc9\024" +
    "\uffc9\001\002\000\004\004\uffcd\001\002\000\010\004\ufff2" +
    "\013\133\042\ufff2\001\002\000\006\006\123\014\uffd1\001" +
    "\002\000\004\014\132\001\002\000\004\042\124\001\002" +
    "\000\006\004\uffcf\005\130\001\002\000\004\004\126\001" +
    "\002\000\006\006\123\014\uffd1\001\002\000\004\014\uffd2" +
    "\001\002\000\004\042\124\001\002\000\004\004\uffd0\001" +
    "\002\000\006\004\ufff3\042\ufff3\001\002\000\006\006\123" +
    "\014\uffd1\001\002\000\004\014\135\001\002\000\006\004" +
    "\ufff4\042\ufff4\001\002\000\006\004\ufff7\005\142\001\002" +
    "\000\004\004\140\001\002\000\046\006\026\007\uffd3\013" +
    "\uffd3\014\uffd3\015\025\016\uffd3\017\uffd3\022\uffd3\023\uffd3" +
    "\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\036\uffd3\042" +
    "\uffd3\044\uffd3\045\uffd3\001\002\000\042\007\uffd4\013\uffd4" +
    "\014\uffd4\016\uffd4\017\uffd4\022\uffd4\023\uffd4\030\uffd4\031" +
    "\uffd4\032\uffd4\033\uffd4\034\uffd4\036\uffd4\042\uffd4\044\uffd4" +
    "\045\uffd4\001\002\000\006\004\ufff5\042\136\001\002\000" +
    "\004\004\ufff6\001\002\000\052\007\uffd6\013\uffd6\014\uffd6" +
    "\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\026" +
    "\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6" +
    "\036\uffd6\042\uffd6\044\uffd6\045\uffd6\001\002\000\004\007" +
    "\245\001\002\000\020\007\040\033\044\034\047\036\046" +
    "\042\052\044\050\045\041\001\002\000\004\007\212\001" +
    "\002\000\004\004\211\001\002\000\052\007\uffdd\013\uffdd" +
    "\014\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023" +
    "\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd" +
    "\034\uffdd\036\uffdd\042\uffdd\044\uffdd\045\uffdd\001\002\000" +
    "\004\007\202\001\002\000\004\004\201\001\002\000\004" +
    "\013\022\001\002\000\052\007\uffd7\013\uffd7\014\uffd7\016" +
    "\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\026\uffd7" +
    "\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\036" +
    "\uffd7\042\uffd7\044\uffd7\045\uffd7\001\002\000\004\014\173" +
    "\001\002\000\004\007\163\001\002\000\050\007\040\013" +
    "\022\014\uffe1\016\146\017\152\021\uffe1\022\153\023\157" +
    "\026\uffe1\027\uffe1\030\154\031\147\032\145\033\044\034" +
    "\047\036\046\042\052\044\050\045\041\001\002\000\052" +
    "\007\uffd8\013\uffd8\014\uffd8\016\uffd8\017\uffd8\020\uffd8\021" +
    "\uffd8\022\uffd8\023\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8" +
    "\032\uffd8\033\uffd8\034\uffd8\036\uffd8\042\uffd8\044\uffd8\045" +
    "\uffd8\001\002\000\012\014\uffe2\021\uffe2\026\uffe2\027\uffe2" +
    "\001\002\000\020\007\040\033\044\034\047\036\046\042" +
    "\052\044\050\045\041\001\002\000\004\004\165\001\002" +
    "\000\020\007\040\033\044\034\047\036\046\042\052\044" +
    "\050\045\041\001\002\000\004\004\167\001\002\000\020" +
    "\007\040\033\044\034\047\036\046\042\052\044\050\045" +
    "\041\001\002\000\004\010\171\001\002\000\040\007\040" +
    "\013\022\016\146\017\152\022\153\023\157\030\154\031" +
    "\147\032\145\033\044\034\047\036\046\042\052\044\050" +
    "\045\041\001\002\000\052\007\uffda\013\uffda\014\uffda\016" +
    "\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\026\uffda" +
    "\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\036" +
    "\uffda\042\uffda\044\uffda\045\uffda\001\002\000\056\002\uffe3" +
    "\006\uffe3\007\uffe3\013\uffe3\014\uffe3\016\uffe3\017\uffe3\020" +
    "\uffe3\021\uffe3\022\uffe3\023\uffe3\026\uffe3\027\uffe3\030\uffe3" +
    "\031\uffe3\032\uffe3\033\uffe3\034\uffe3\036\uffe3\042\uffe3\044" +
    "\uffe3\045\uffe3\001\002\000\004\032\175\001\002\000\004" +
    "\007\176\001\002\000\020\007\040\033\044\034\047\036" +
    "\046\042\052\044\050\045\041\001\002\000\004\010\200" +
    "\001\002\000\052\007\uffb0\013\uffb0\014\uffb0\016\uffb0\017" +
    "\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\026\uffb0\027\uffb0" +
    "\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\036\uffb0\042" +
    "\uffb0\044\uffb0\045\uffb0\001\002\000\052\007\uffd9\013\uffd9" +
    "\014\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023" +
    "\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9" +
    "\034\uffd9\036\uffd9\042\uffd9\044\uffd9\045\uffd9\001\002\000" +
    "\020\007\040\033\044\034\047\036\046\042\052\044\050" +
    "\045\041\001\002\000\004\010\204\001\002\000\040\007" +
    "\040\013\022\016\146\017\152\022\153\023\157\030\154" +
    "\031\147\032\145\033\044\034\047\036\046\042\052\044" +
    "\050\045\041\001\002\000\052\007\uffdf\013\uffdf\014\uffdf" +
    "\016\uffdf\017\uffdf\020\207\021\uffdf\022\uffdf\023\uffdf\026" +
    "\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf" +
    "\036\uffdf\042\uffdf\044\uffdf\045\uffdf\001\002\000\052\007" +
    "\uffdb\013\uffdb\014\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb" +
    "\022\uffdb\023\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032" +
    "\uffdb\033\uffdb\034\uffdb\036\uffdb\042\uffdb\044\uffdb\045\uffdb" +
    "\001\002\000\040\007\040\013\022\016\146\017\152\022" +
    "\153\023\157\030\154\031\147\032\145\033\044\034\047" +
    "\036\046\042\052\044\050\045\041\001\002\000\052\007" +
    "\uffe0\013\uffe0\014\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0" +
    "\022\uffe0\023\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032" +
    "\uffe0\033\uffe0\034\uffe0\036\uffe0\042\uffe0\044\uffe0\045\uffe0" +
    "\001\002\000\052\007\uffde\013\uffde\014\uffde\016\uffde\017" +
    "\uffde\020\uffde\021\uffde\022\uffde\023\uffde\026\uffde\027\uffde" +
    "\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\036\uffde\042" +
    "\uffde\044\uffde\045\uffde\001\002\000\004\042\213\001\002" +
    "\000\004\010\214\001\002\000\004\013\215\001\002\000" +
    "\004\026\220\001\002\000\006\026\uffb7\027\uffb7\001\002" +
    "\000\006\026\220\027\233\001\002\000\006\035\221\045" +
    "\222\001\002\000\004\041\227\001\002\000\004\041\223" +
    "\001\002\000\046\007\040\013\022\016\146\017\152\021" +
    "\uffe1\022\153\023\157\026\uffe1\027\uffe1\030\154\031\147" +
    "\032\145\033\044\034\047\036\046\042\052\044\050\045" +
    "\041\001\002\000\010\021\225\026\uffb4\027\uffb4\001\002" +
    "\000\004\004\226\001\002\000\006\026\uffb3\027\uffb3\001" +
    "\002\000\046\007\040\013\022\016\146\017\152\021\uffe1" +
    "\022\153\023\157\026\uffe1\027\uffe1\030\154\031\147\032" +
    "\145\033\044\034\047\036\046\042\052\044\050\045\041" +
    "\001\002\000\010\021\231\026\uffb6\027\uffb6\001\002\000" +
    "\004\004\232\001\002\000\006\026\uffb5\027\uffb5\001\002" +
    "\000\004\041\237\001\002\000\006\026\uffb8\027\uffb8\001" +
    "\002\000\004\014\236\001\002\000\052\007\uffb1\013\uffb1" +
    "\014\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023" +
    "\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1" +
    "\034\uffb1\036\uffb1\042\uffb1\044\uffb1\045\uffb1\001\002\000" +
    "\042\007\040\013\022\016\146\017\152\021\uffe1\022\153" +
    "\023\157\030\154\031\147\032\145\033\044\034\047\036" +
    "\046\042\052\044\050\045\041\001\002\000\004\021\241" +
    "\001\002\000\004\004\242\001\002\000\004\014\uffb2\001" +
    "\002\000\004\004\244\001\002\000\052\007\uffdc\013\uffdc" +
    "\014\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023" +
    "\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc" +
    "\034\uffdc\036\uffdc\042\uffdc\044\uffdc\045\uffdc\001\002\000" +
    "\020\007\040\033\044\034\047\036\046\042\052\044\050" +
    "\045\041\001\002\000\004\010\247\001\002\000\004\013" +
    "\022\001\002\000\052\007\uffaf\013\uffaf\014\uffaf\016\uffaf" +
    "\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\026\uffaf\027" +
    "\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\036\uffaf" +
    "\042\uffaf\044\uffaf\045\uffaf\001\002\000\004\002\ufff0\001" +
    "\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\250\000\006\003\003\043\004\001\001\000\002\001" +
    "\001\000\006\006\006\032\005\001\001\000\002\001\001" +
    "\000\006\006\006\032\250\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\016\001" +
    "\001\000\002\001\001\000\004\010\020\001\001\000\002" +
    "\001\001\000\006\005\023\014\022\001\001\000\026\010" +
    "\150\011\155\012\157\022\147\023\052\031\036\036\143" +
    "\040\160\041\154\042\054\001\001\000\004\004\136\001" +
    "\001\000\002\001\001\000\006\017\030\020\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\023\014\032\001\001\000\002\001\001\000\006" +
    "\017\116\020\027\001\001\000\002\001\001\000\014\021" +
    "\041\022\044\023\052\031\036\042\042\001\001\000\002" +
    "\001\001\000\010\023\112\031\036\042\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\023\107\031\036\042\054\001\001\000\014" +
    "\022\100\023\052\025\105\031\036\042\054\001\001\000" +
    "\004\024\061\001\001\000\002\001\001\000\010\023\055" +
    "\031\036\042\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\042\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\022\100\023\052\025" +
    "\101\031\036\033\070\042\077\001\001\000\012\022\075" +
    "\023\052\031\036\042\054\001\001\000\004\031\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\033\070" +
    "\042\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\033\073\042\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\022\100\023\052\025\104\031\036\042\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\111\020\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\121\001\001\000\002\001\001\000\004" +
    "\016\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\126\001\001\000\002\001\001\000\004\016\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\133\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\023\014\140\001" +
    "\001\000\002\001\001\000\004\004\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\022" +
    "\242\023\052\031\036\042\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\010\150\011" +
    "\161\012\157\022\147\023\052\031\036\036\143\040\160" +
    "\041\154\042\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\022\163\023\052\031\036\042\054\001\001" +
    "\000\002\001\001\000\012\022\165\023\052\031\036\042" +
    "\054\001\001\000\002\001\001\000\012\022\167\023\052" +
    "\031\036\042\054\001\001\000\002\001\001\000\024\010" +
    "\150\012\171\022\147\023\052\031\036\036\143\040\160" +
    "\041\154\042\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\022\176" +
    "\023\052\031\036\042\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\022\202\023\052" +
    "\031\036\042\054\001\001\000\002\001\001\000\024\010" +
    "\150\012\204\022\147\023\052\031\036\036\143\040\160" +
    "\041\154\042\054\001\001\000\004\013\205\001\001\000" +
    "\002\001\001\000\024\010\150\012\207\022\147\023\052" +
    "\031\036\036\143\040\160\041\154\042\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\034\215\037\216\001" +
    "\001\000\002\001\001\000\006\034\233\035\234\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\010\150\011\223\012\157\022\147\023\052\031\036" +
    "\036\143\040\160\041\154\042\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\010\150" +
    "\011\227\012\157\022\147\023\052\031\036\036\143\040" +
    "\160\041\154\042\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\010\150" +
    "\011\237\012\157\022\147\023\052\031\036\036\143\040" +
    "\160\041\154\042\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\022\245\023\052\031\036\042\054\001\001" +
    "\000\002\001\001\000\004\010\247\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





	 
	
	


public void syntax_error(Symbol s) {
            
	 ScreenOutManager.getInstance().addLine("Error de sintaxis " + "Linea " + (s.left+1) +" Columna " +(s.right+1)  + " Cerca de: " + s.value);
		//System.out.println("Error de sintaxis " + "Linea " + s.left + " Cerca de " + s.value);				
	}


	public void unrecovered_syntax_error(Symbol s) throws
	  java.lang.Exception {
            
	}



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



	TablaDeTipos tabla;
	TablaDeSimbolo tablaSimbol;
	int cuentaWhiles, ambito=0,tipoDato,cod=0,dir=10000,contParametros=0,prueba=0,codigoTipo=0,auxPadre,banderaDeclaracion=0,codTipo=0,banderaFor=0,contFor=0,opDer,opIzq;
	int bandera=0, dStruct = 0,aux1,aux2,banderaAmbito=0,pruebaAux=0,ambitoTipo,auxAmbito;
	String id1="",id2="",binario = "",auxId1, nombre = "";
	
	void inicializar() {
		derecho = new Expresion();
		tabla = new TablaDeTipos();
		tablaSimbol=new TablaDeSimbolo();
		cuentaWhiles = 0;
	
        
	}
	int obtenerCodigoTablaTipo(String id){
	    return tabla.obtenerCodigoDelTipo(id);
	}
	
	int obtenerAmbitoTablaTipo(String id){
	    return tabla.obtenerAmbitoDelTipo(id);
	}
    int obtenerTipo(String tipo){
	    return tabla.getCodigoTipo(tipo);
	}
	
	int obtenerDireccion(String id,int ambito){
	    return tablaSimbol.getDireccionn(id,ambito);
	}
	int obtenertipoEnSimbolo(String id){
	     return tablaSimbol.obtenerCodigoTipo(id);
	}
	
	 int getDimensionStruct(String id,int ambito){
	    return tabla.getDimensionStruct(id,ambito);
	}
	
	boolean existeTipoDato(String id) {
		return tabla.existeTipo(id);
	}
	
	boolean existeTipoStruct(String id,int ambito) {
		return tabla.existeTipoStruc(id,ambito);
	}
	void inserarNuevoTipo(int codigoTip,String nombreTipo,int tipoBase,int padre,int dimens,int min,int max,int ambit){
	   
	        tabla.addNuevoTipo(codigoTip,nombreTipo,tipoBase,padre,dimens,min,max,ambit);
	}
	boolean existeSimboloEstructura(String id,String categori,int ambito){
	     return tablaSimbol.existeSimboloEstruct(id,categori,ambito);
	}
	
	boolean existeVariableCuerpoEstructura(int tipo,String id){
	        return tabla.existeVariableCuerpoEstruct(tipo,id);
        }
	
	
	boolean existeSimbolo(String id,int ambitoo) {
		return tablaSimbol.existeSimboloEnAmbito(id,ambitoo);
	}
	void modificarVariableAVector(int codigoo,String nombree,String categ,String tam){
                tablaSimbol.modificarVariableVector(codigoo,nombree,categ,tam);
    }
    boolean existeSimboloFunci(String id,String categoria,int parametros) {
		return tablaSimbol.existeSimboloFuncion(id,categoria,parametros);
	}
	
	boolean existeSimboloVector(String id,int ambito,String categoria) {
		return tablaSimbol.existeSimboloVect(id,ambito,categoria);
	}
	void addSimbolo(int codigo,String id,String categoria,int tipo,int valor,int dimension,int min,int max,int nroPar,int lisPar,int dir,int ambito) {
	
		tablaSimbol.agregaSimbolo(codigo,id,categoria,tipo,valor,dimension,min,max,nroPar,lisPar,dir,ambito);
	}
	Expresion derecho;
	String auxId="",auxIdStruct="",auxIdVariableStruct="";

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // while_ ::= WHILE LP exp RP stmtblock 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*while_*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // do_while_ ::= DO stmtblock WHILE LP exp RP 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(30/*do_while_*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // switc_ ::= SWITCH LP ID RP LC case_list default_ RC 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*switc_*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // default_ ::= DEFAULT COLON stmts BREAK SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(27/*default_*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // case_ ::= CASE INT COLON stmts BREAK SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(26/*case_*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // case_ ::= CASE INT COLON stmts 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(26/*case_*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // case_ ::= CASE CHAR_LITERAL COLON stmts BREAK SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(26/*case_*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // case_ ::= CASE CHAR_LITERAL COLON stmts 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(26/*case_*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // case_list ::= case_ 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(29/*case_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // case_list ::= case_list case_ 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(29/*case_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // args ::= exp 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*args*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // args ::= exp COMMA args 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*args*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // arrs ::= LB exp RB 
            {
              Expresion RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*arrs*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPS ::= func_llamado 
            {
              Expresion RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*EXPS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPS ::= ID DOT func_llamado 
            {
              Expresion RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*EXPS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPS ::= ID DOT ID 
            {
              Expresion RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*EXPS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPS ::= ID arrs 
            {
              Expresion RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*EXPS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPS ::= ID LP args RP 
            {
              Expresion RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*EXPS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPS ::= LP EXPS RP 
            {
              Expresion RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*EXPS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPS ::= UNARYOP EXPS 
            {
              Expresion RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*EXPS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPS ::= paras_end BINARYOP paras_end 
            {
              Expresion RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*EXPS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPS ::= EXPS BINARYOP EXPS 
            {
              Expresion RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*EXPS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp ::= EXPS 
            {
              Expresion RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // initi ::= paras_end 
            {
              Expresion RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*initi*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // initi ::= LC args RC 
            {
              Expresion RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*initi*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // initi ::= exp 
            {
              Expresion RESULT = null;
		int exppleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int exppright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion expp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*initi*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // var ::= var LB INT RB 
            {
              Expresion RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*var*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // var ::= ID 
            {
              Expresion RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*var*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // decs ::= var ASSING initi 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*decs*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // decs ::= var ASSING initi COMMA decs 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*decs*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // decs ::= var COMMA decs 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*decs*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // decs ::= var 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*decs*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sdecs ::= ID 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*sdecs*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sdecs ::= ID COMMA sdecs 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*sdecs*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sdefs ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*sdefs*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sdefs ::= TYPE sdecs SEMI sdefs 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*sdefs*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // defs ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*defs*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // defs ::= stspec sextvars SEMI defs 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*defs*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // defs ::= TYPE decs SEMI defs 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*defs*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // stmt ::= switc_ 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // stmt ::= while_ 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // stmt ::= do_while_ 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // stmt ::= CONT SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmt ::= FOR LP exp SEMI exp SEMI exp RP stmt 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt ::= IF LP exp RP stmt stmtelse 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= RETURN exp SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= stmtblock 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= exp SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmtelse ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*stmtelse*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmtelse ::= ELSE stmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*stmtelse*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmts ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*stmts*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmts ::= stmt stmts 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*stmts*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmtblock ::= LC defs stmts RC 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*stmtblock*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // paras_end ::= STRING_LITERAL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(32/*paras_end*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // paras_end ::= CONSTANTE_LOGICA 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(32/*paras_end*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // paras_end ::= NULL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(32/*paras_end*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // paras_end ::= INT 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(32/*paras_end*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // paras_end ::= ID 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(32/*paras_end*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // paras_llamado ::= paras_end 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*paras_llamado*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // paras_llamado ::= paras_end COMMA paras_llamado 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*paras_llamado*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // paras ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*paras*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // paras ::= TYPE ID 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*paras*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // paras ::= TYPE ID COMMA paras 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*paras*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // func_llamado ::= ID LP paras_llamado RP 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*func_llamado*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // funcs ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*funcs*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // funcs ::= func funcs 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*funcs*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // func ::= TYPE ID LP paras RP stmtblock 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*func*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stspec ::= STRUCT ID 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*stspec*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stspec ::= STRUCT LC sdefs RC 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*stspec*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stspec ::= STRUCT ID LC sdefs RC 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*stspec*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sextvars ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*sextvars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sextvars ::= ID COMMA sextvars 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*sextvars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sextvars ::= ID 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*sextvars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // defines ::= DEFINE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*defines*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // defines ::= DEFINE defines 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*defines*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // includes ::= INCLUDE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*includes*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // includes ::= INCLUDE includes 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*includes*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // header ::= defines 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*header*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header ::= includes 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*header*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= includes defines header 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*header*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= NT$0 funcs 
            {
              Object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT = null;

			inicializar();			
		 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

